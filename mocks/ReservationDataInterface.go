// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	reservations "groupproject3-airbnb-api/features/reservations"

	mock "github.com/stretchr/testify/mock"
)

// ReservationDataInterface is an autogenerated mock type for the ReservationDataInterface type
type ReservationDataInterface struct {
	mock.Mock
}

// SelectyRoomAndDateRange provides a mock function with given fields: reservationEntity
func (_m *ReservationDataInterface) SelectyRoomAndDateRange(reservationEntity reservations.ReservationEntity) ([]reservations.ReservationEntity, error) {
	ret := _m.Called(reservationEntity)

	var r0 []reservations.ReservationEntity
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity) []reservations.ReservationEntity); ok {
		r0 = rf(reservationEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reservations.ReservationEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reservations.ReservationEntity) error); ok {
		r1 = rf(reservationEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: reservationEntity
func (_m *ReservationDataInterface) Store(reservationEntity reservations.ReservationEntity) (uint, error) {
	ret := _m.Called(reservationEntity)

	var r0 uint
	if rf, ok := ret.Get(0).(func(reservations.ReservationEntity) uint); ok {
		r0 = rf(reservationEntity)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reservations.ReservationEntity) error); ok {
		r1 = rf(reservationEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReservationDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewReservationDataInterface creates a new instance of ReservationDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReservationDataInterface(t mockConstructorTestingTNewReservationDataInterface) *ReservationDataInterface {
	mock := &ReservationDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
